{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"auth",
				"authorized_keys"
			],
			[
				"authori",
				"authorized_keys"
			],
			[
				"for",
				"forin	for … in … done"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/Dockerfile",
			"settings":
			{
				"buffer_size": 3387,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/bash\nset -e\n\n# allow the container to be started with `--user`\nif [ \"$1\" = 'rabbitmq-server' -a \"$(id -u)\" = '0' ]; then\n	chown -R rabbitmq /var/lib/rabbitmq\n	exec gosu rabbitmq \"$BASH_SOURCE\" \"$@\"\nfi\n\nssl=\nif [ \"$RABBITMQ_SSL_CERT_FILE\" -a \"$RABBITMQ_SSL_KEY_FILE\" -a \"$RABBITMQ_SSL_CA_FILE\" ]; then\n	ssl=1\nfi\n\n# If long & short hostnames are not the same, use long hostnames\nif [ \"$(hostname)\" != \"$(hostname -s)\" ]; then\n	export RABBITMQ_USE_LONGNAME=true\nfi\n\nif [ \"$RABBITMQ_ERLANG_COOKIE\" ]; then\n	cookieFile='/var/lib/rabbitmq/.erlang.cookie'\n	if [ -e \"$cookieFile\" ]; then\n		if [ \"$(cat \"$cookieFile\" 2>/dev/null)\" != \"$RABBITMQ_ERLANG_COOKIE\" ]; then\n			echo >&2\n			echo >&2 \"warning: $cookieFile contents do not match RABBITMQ_ERLANG_COOKIE\"\n			echo >&2\n		fi\n	else\n		echo \"$RABBITMQ_ERLANG_COOKIE\" > \"$cookieFile\"\n		chmod 600 \"$cookieFile\"\n	fi\nfi\n\nif [ \"$1\" = 'rabbitmq-server' ]; then\n	configs=(\n		# https://www.rabbitmq.com/configure.html\n		default_pass\n		default_user\n		default_vhost\n		ssl_ca_file\n		ssl_cert_file\n		ssl_key_file\n	)\n\n	haveConfig=\n	for conf in \"${configs[@]}\"; do\n		var=\"RABBITMQ_${conf^^}\"\n		val=\"${!var}\"\n		if [ \"$val\" ]; then\n			haveConfig=1\n			break\n		fi\n	done\n\n	if [ \"$haveConfig\" ]; then\n		cat > /etc/rabbitmq/rabbitmq.config <<-'EOH'\n			[\n			  {rabbit,\n			    [\n		EOH\n		\n		if [ \"$ssl\" ]; then\n			cat >> /etc/rabbitmq/rabbitmq.config <<-EOS\n			      { tcp_listeners, [ ] },\n			      { ssl_listeners, [ 5671 ] },\n			      { ssl_options,  [\n			        { certfile,   \"$RABBITMQ_SSL_CERT_FILE\" },\n			        { keyfile,    \"$RABBITMQ_SSL_KEY_FILE\" },\n			        { cacertfile, \"$RABBITMQ_SSL_CA_FILE\" },\n			        { verify,   verify_peer },\n			        { fail_if_no_peer_cert, true } ] },\n			EOS\n		else\n			cat >> /etc/rabbitmq/rabbitmq.config <<-EOS\n			      { tcp_listeners, [ 5672 ] },\n			      { ssl_listeners, [ ] },\n			EOS\n		fi\n		\n		for conf in \"${configs[@]}\"; do\n			[ \"${conf#ssl_}\" = \"$conf\" ] || continue\n			var=\"RABBITMQ_${conf^^}\"\n			val=\"${!var}\"\n			[ \"$val\" ] || continue\n			cat >> /etc/rabbitmq/rabbitmq.config <<-EOC\n			      {$conf, <<\"$val\">>},\n			EOC\n		done\n		cat >> /etc/rabbitmq/rabbitmq.config <<-'EOF'\n			      {loopback_users, []}\n		EOF\n\n		# If management plugin is installed, then generate config consider this\n		if [ \"$(rabbitmq-plugins list -m -e rabbitmq_management)\" ]; then\n			cat >> /etc/rabbitmq/rabbitmq.config <<-'EOF'\n				    ]\n				  },\n				  { rabbitmq_management, [\n				      { listener, [\n			EOF\n\n			if [ \"$ssl\" ]; then\n				cat >> /etc/rabbitmq/rabbitmq.config <<-EOS\n				      { port, 15671 },\n				      { ssl, true },\n				      { ssl_opts, [\n				          { certfile,   \"$RABBITMQ_SSL_CERT_FILE\" },\n				          { keyfile,    \"$RABBITMQ_SSL_KEY_FILE\" },\n				          { cacertfile, \"$RABBITMQ_SSL_CA_FILE\" },\n				      { verify,   verify_none },\n				      { fail_if_no_peer_cert, false } ] } ] }\n				EOS\n			else\n				cat >> /etc/rabbitmq/rabbitmq.config <<-EOS\n				        { port, 15672 },\n				        { ssl, false }\n				        ]\n				      }\n				EOS\n			fi\n		fi\n\n		cat >> /etc/rabbitmq/rabbitmq.config <<-'EOF'\n			    ]\n			  }\n			].\n		EOF\n	fi\n\n	if [ \"$ssl\" ]; then\n		# Create combined cert\n		cat \"$RABBITMQ_SSL_CERT_FILE\" \"$RABBITMQ_SSL_KEY_FILE\" > /tmp/combined.pem\n		chmod 0400 /tmp/combined.pem\n\n		# More ENV vars for make clustering happiness\n		# we don't handle clustering in this script, but these args should ensure\n		# clustered SSL-enabled members will talk nicely\n		export ERL_SSL_PATH=\"$(erl -eval 'io:format(\"~p\", [code:lib_dir(ssl, ebin)]),halt().' -noshell)\"\n		export RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\"-pa '$ERL_SSL_PATH' -proto_dist inet_tls -ssl_dist_opt server_certfile /tmp/combined.pem -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true\"\n		export RABBITMQ_CTL_ERL_ARGS=\"$RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS\"\n	fi\nfi\n\n#exec \"$@\"\n",
			"file": "/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/docker-entrypoint.sh",
			"file_size": 3847,
			"file_write_time": 1467446219000000,
			"settings":
			{
				"buffer_size": 3847,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/startclusternode.sh",
			"settings":
			{
				"buffer_size": 3747,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 72.0,
		"selected_items":
		[
			[
				"Package Control: docke",
				"Package Control: Discover Packages"
			],
			[
				"Package Control:sy",
				"Package Control: Add Repository"
			],
			[
				"Package Control: ",
				"Package Control: Satisfy Dependencies"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/update.sh",
		"/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/docker-entrypoint.sh",
		"/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/management/Dockerfile",
		"/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/Dockerfile",
		"/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/generate-stackbrew-library.sh",
		"/media/sf_git/docker/DockerComposeRichardRabbit/new/baseimage/Dockerfile",
		"/media/sf_git/docker/DockerComposeRabbit/baserabbitimage/Dockerfile",
		"/media/sf_git/docker/Barman/barman/Dockerfile",
		"/root/.config/sublime-text-2/Packages/Package Control/Package Control.sublime-settings",
		"/root/.config/sublime-text-2/Packages/User/JSON.sublime-settings",
		"/media/sf_git/docker/Barman/basepgbrm/Dockerfile",
		"/media/sf_git/docker/Barman/barman/startsshd.sh",
		"/media/sf_git/docker/Barman/barman/docker-compose.yml",
		"/media/sf_git/docker/Barman/barman/foldertest.sh",
		"/media/sf_git/docker/DockerCompose/db/Dockerfile",
		"/media/sf_git/docker/DockerCompose/docker-compose.yml",
		"/media/sf_git/docker/DockerCompose/docker-compose.ymlbackup2",
		"/media/sf_git/docker/Barman/db/Dockerfile",
		"/root/anaconda-ks.cfg",
		"/media/sf_git/docker/DockerCompose/web/app.py"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/Dockerfile",
					"settings":
					{
						"buffer_size": 3387,
						"regions":
						{
						},
						"selection":
						[
							[
								3387,
								3387
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/docker-entrypoint.sh",
					"settings":
					{
						"buffer_size": 3847,
						"regions":
						{
						},
						"selection":
						[
							[
								824,
								824
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1440.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/media/sf_git/docker/DockerCompose/rabbit/new/baseimagedebian/rabbitmq/startclusternode.sh",
					"settings":
					{
						"buffer_size": 3747,
						"regions":
						{
						},
						"selection":
						[
							[
								1170,
								1170
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 377.0,
	"status_bar_visible": true
}
